#!/usr/bin/env bash
echo "-----> Adding precompiled assets"

ENV_DIR=${3:-}

export_env_dir() {
  env_dir=$1
  acceptlist_regex=${2:-''}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

pipeline_for_current_revision() {
  PIPELINES=$(curl -H "Circle-Token: $CIRCLE_CI_AUTH" https://circleci.com/api/v2/project/gh/boldtrail/amitree/pipeline?branch=$BRANCH)
  echo "Pipelines: $PIPELINES"

  PIPELINE=$(echo "${PIPELINES}" | jq -cr "[.items[] | select(.vcs.revision == \"$SOURCE_VERSION\")] | first")
  echo "Pipeline: $PIPELINE"

  PIPELINE_ID=$(echo "${PIPELINE}" | jq -r '.id')
  if [ $PIPELINE_ID == null ]; then
    echo "-----> Failed as no pipeline was found for branch: '$BRANCH' and revision: '$SOURCE_VERSION'"
    exit 1
  fi
}

workflows_for_pipeline() {
  WORKFLOWS=$(curl -H "Circle-Token: $CIRCLE_CI_AUTH" https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow)
  echo "Workflows: $WORKFLOWS"

  WORKFLOW_ID=$(echo "${WORKFLOWS}" | jq -r '.items | first | .id')

  if [ $WORKFLOW_ID == null ]; then
    echo "-----> Failed as no workflow was found for pipeline: '$PIPELINE_ID'"
    exit 1
  fi
}

artifacts_job_for_workflow() {
  JOBS=$(curl -H "Circle-Token: $CIRCLE_CI_AUTH" https://circleci.com/api/v2/workflow/$WORKFLOW_ID/job)
  echo "Jobs: $JOBS"

  JOB=$(echo "${JOBS}" | jq -cr '[.items[] | select(.name == "artifacts")] | first')
  echo "Job: $JOB"

  JOB_NUMBER=$(echo "${JOB}" | jq -r '.job_number')
  JOB_STATUS=$(echo "${JOB}" | jq -r '.status')

  if [ $JOB_NUMBER == null ] && [ $JOB_STATUS == null ]; then
    echo "-----> Failed as no artifacts job was found for workflow: '$WORKFLOW_ID'"
    exit 1
  fi
}

artifacts_for_job() {
  ARTIFACTS=$(curl -H "Circle-Token: $CIRCLE_CI_AUTH" https://circleci.com/api/v2/project/gh/boldtrail/amitree/$JOB_NUMBER/artifacts)
  echo "Artifacts: $ARTIFACTS"

  ARTIFACT_URLS=$(echo "${ARTIFACTS}" | jq -r '.items[] | .url')

  if [ -z "$ARTIFACT_URLS" ]; then
    echo "-----> Failed as no artifacts were found for job: '$JOB_NUMBER'"
    exit 1
  fi
}

# Export env
export_env_dir "$ENV_DIR"

cd $1

PIPELINE_ID=null
WORKFLOW_ID=null
JOB_NUMBER=null
JOB_STATUS=null
ARTIFACT_URLS=null

LOOP_COUNT=0
BRANCH=${HEROKU_BRANCH:-master}

echo "$BRANCH - $SOURCE_VERSION"

echo "... Searching for Circle Ci pipeline ..."
pipeline_for_current_revision

echo "... Searching for Circle Ci workflow ..."
workflows_for_pipeline

while : ; do
  LOOP_COUNT=$(( $LOOP_COUNT + 1 ))

  echo "... Searching for Circle Ci artifacts job ..."
  artifacts_job_for_workflow
  echo "Attempt: $LOOP_COUNT - Current job status: $JOB_STATUS"

  if [ $JOB_STATUS != 'running' ] && [ $JOB_STATUS != 'queued' ] && [ $JOB_STATUS != 'blocked' ]; then
    break
  fi

  if [ $LOOP_COUNT -ge 9 ]; then
    echo "-----> Failed as the artifacts job didn't start/finish yet"
    exit 1
  fi 

  echo "... Waiting 3 minutes to attempt searching build number again ..."
  sleep 3m
done

echo "... Searching for Circle Ci job's artifacts ..."
artifacts_for_job

echo "... Downloading artifacts ..."
echo "$ARTIFACT_URLS" | \
grep -o 'https://.*compiled[a-z/._]*' | \
wget --verbose --header "Circle-Token: $CIRCLE_CI_AUTH" --input-file -

unzip the assets to the approprait directory
unzip compiled_assets.zip
unzip compiled_tmp_assets.zip

# delete zipped file
rm compiled_assets.zip
rm compiled_tmp_assets.zip

echo "-----> Done adding precompiled assets"
